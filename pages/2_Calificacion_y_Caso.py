# pages/2_Calificacion.py
import re
from datetime import datetime
import streamlit as st

st.set_page_config(page_title="Calificaci√≥n + Caso", page_icon="‚úÖ", layout="wide")

# ------------------ Estado global base ------------------
if "lead" not in st.session_state:
    st.session_state.lead = {
        "empresa": "", "contacto": "", "correo": "", "telefono": "", "descripcion": ""
    }

if "score" not in st.session_state:
    st.session_state.score = 0
if "calif_listo" not in st.session_state:
    st.session_state.calif_listo = False

# Caso de negocio (memoria del chat)
REQUIRED_FIELDS = [
    ("objetivos", "¬øCu√°les son los objetivos de negocio?"),
    ("problema", "¬øCu√°l es el problema a resolver?"),
    ("solucion", "¬øCu√°l es la soluci√≥n esperada?"),
    ("target", "¬øQui√©n va a utilizar la soluci√≥n? (TARGET)"),
    ("funcionalidades", "¬øQu√© funcionalidades espera tener?"),
    ("expectativas", "¬øQu√© expectativas tiene con esta soluci√≥n?"),
    ("experiencia", "¬øHa tenido experiencia previa similar a este proyecto?"),
    ("adjudicacion", "¬øCu√°l es la forma de adjudicaci√≥n?"),
    ("criterios", "¬øCu√°les son los criterios de evaluaci√≥n?"),
    ("lanzamiento", "¬øCu√°l ser√≠a la fecha de lanzamiento?"),
    ("presupuesto", "¬øCu√°l es el rango del presupuesto?"),
    ("nombre_proyecto", "¬øQu√© nombre le pondr√≠as al proyecto?"),
    ("notas", "¬øAlguna nota general o consideraci√≥n adicional?")
]

if "caso" not in st.session_state:
    st.session_state.caso = {k: "" for k, _ in REQUIRED_FIELDS}
if "chat_msgs" not in st.session_state:
    st.session_state.chat_msgs = []
if "intel_urls" not in st.session_state:
    st.session_state.intel_urls = [
        "https://babelgroup.com",
        "https://www.accenture.com",
        "https://www.ibm.com/consulting"
    ]
if "caso_finalizado" not in st.session_state:
    st.session_state.caso_finalizado = False


# ------------------ Utilidades ------------------
def calc_score(resps: dict) -> int:
    pesos = {"q1": 20, "q2": 30, "q3": 30, "q4": 5, "q5": 5}
    puntos = sum(pesos[k] for k, v in resps.items() if v is True)
    return round(puntos / 90 * 100)

def badge(ok: bool) -> str:
    return "üü¢ OK" if ok else "üü° Pendiente"

def add_msg(role, text):
    st.session_state.chat_msgs.append((role, text))

def first_missing(caso_dict):
    for k, pregunta in REQUIRED_FIELDS:
        if not str(caso_dict.get(k, "")).strip():
            return k, pregunta
    return None, None

# --------- Extracci√≥n simple de informaci√≥n (reglas) ---------
def extract_info_es(text: str) -> dict:
    """
    Heur√≠sticas livianas para capturar campos del caso de negocio desde texto libre en espa√±ol.
    No es IA generativa; es regex + palabras clave. Sirve para acelerar la captura.
    """
    t = text.lower().strip()
    out = {}

    # presupuesto (rangos, montos) ej: 1.5 M, $800k, 200 mil, 1 a 2 MUSD
    money_regex = r'(\$?\s?\d{1,3}(?:[\.,]\d{3})*(?:[\.,]\d+)?\s*(k|mil|m|mm|millones|usd|mxn)?)'
    m = re.search(money_regex, t)
    if m:
        out["presupuesto"] = m.group(0)

    # fecha de lanzamiento (mes/a√±o, dd/mm/aaaa, ‚ÄúQ4‚Äù, ‚Äúoctubre 2025‚Äù, ‚Äúen 3 meses‚Äù)
    f1 = re.search(r'(q[1-4]\s*\d{4}|ene|feb|mar|abr|may|jun|jul|ago|sep|oct|nov|dic|\d{1,2}/\d{1,2}/\d{2,4}|20\d{2})', t)
    if f1:
        out["lanzamiento"] = f1.group(0)

    # objetivos / problema / soluci√≥n: detecta por palabras gatillo si no hay valor previo
    if any(w in t for w in ["objetivo", "meta", "resultados de negocio", "okrs"]):
        out["objetivos"] = text
    if any(w in t for w in ["problema", "dolor", "pain", "barrera"]):
        out["problema"] = text
    if any(w in t for w in ["soluci√≥n", "resolver", "propuesta", "implantar", "implementar"]):
        out["solucion"] = text

    # target
    if any(w in t for w in ["usuario", "usuarios", "target", "comercial", "marketing", "finanzas", "ventas", "operaciones"]):
        out["target"] = text

    # funcionalidades / expectativas
    if any(w in t for w in ["funcionalidad", "features", "m√≥dulo", "m√≥dulos"]):
        out["funcionalidades"] = text
    if "esper" in t or "√©xito" in t or "kpi" in t:
        out["expectativas"] = text

    # experiencia previa
    if any(w in t for w in ["experiencia", "proyecto similar", "piloto", "poC", "poc", "antes hicimos"]):
        out["experiencia"] = text

    # adjudicaci√≥n / criterios
    if any(w in t for w in ["adjudic", "licitaci√≥n", "cotizaci√≥n", "3 cotizaciones", "rfi", "rfp"]):
        out["adjudicacion"] = text
    if any(w in t for w in ["criterio", "evaluaci√≥n", "score", "puntos", "ponderaci√≥n"]):
        out["criterios"] = text

    # nombre del proyecto
    if any(w in t for w in ["se llamar√°", "nombre del proyecto", "proyecto:", "codename"]):
        out["nombre_proyecto"] = text

    # notas (catch-all si usuario dice ‚Äúnota‚Äù, ‚Äúaclaraci√≥n‚Äù)
    if any(w in t for w in ["nota", "aclaraci√≥n", "consideraci√≥n", "riesgo"]):
        out["notas"] = text

    return out

def render_resumen_live():
    empresa = st.session_state.lead.get("empresa") or "‚Äî"
    st.markdown("#### Resumen en vivo")
    st.markdown(f"**Empresa:** {empresa}")
    cols = st.columns(2)
    for i, (k, label) in enumerate(REQUIRED_FIELDS):
        val = st.session_state.caso.get(k, "")
        with cols[i % 2]:
            st.markdown(f"- **{label.replace('¬ø','').replace('?','')}**<br>{(val or '‚Äî')}", unsafe_allow_html=True)


# ------------------ UI: M√©tricas de cabecera ------------------
st.markdown("## 2) Calificaci√≥n + Caso de negocio")
colA, colB, colC = st.columns([1, 1, 2])
with colA:
    st.metric("Score", f"{st.session_state.score}%")
with colB:
    st.metric("Calificaci√≥n", badge(st.session_state.calif_listo))
with colC:
    st.metric("Lead", st.session_state.lead.get("empresa") or "‚Äî")

st.divider()

# ------------------ Pesta√±as ------------------
tab_calif, tab_chat, tab_intel = st.tabs(
    ["A) Calificaci√≥n", "B) Caso (chat inteligente)", "C) Inteligencia competitiva"]
)

# ============ TAB A: CALIFICACI√ìN ============
with tab_calif:
    st.caption("Ponderaci√≥n: 20 / 30 / 30 / 5 / 5 ‚Ä¢ Requiere ‚â• 70% para habilitar el chat")
    with st.form("frm_calif"):
        q1 = st.radio("¬øTiene fecha planeada para iniciar proyecto?", ["Sin responder", "S√≠", "No"], index=0, horizontal=True)
        q2 = st.radio("¬øCuenta con presupuesto?", ["Sin responder", "S√≠", "No"], index=0, horizontal=True)
        q3 = st.radio("¬øEs un proyecto para incrementar ventas o marketing?", ["Sin responder", "S√≠", "No"], index=0, horizontal=True)
        q4 = st.radio("¬øEl proyecto resuelve un problema de prioridad 1, 2 o 3 dentro de la empresa?", ["Sin responder", "S√≠", "No"], index=0, horizontal=True)
        q5 = st.radio("¬øHablamos con tomador de decisi√≥n?", ["Sin responder", "S√≠", "No"], index=0, horizontal=True)
        enviar = st.form_submit_button("Calcular calificaci√≥n ‚úÖ", use_container_width=True)

    if enviar:
        resps = {
            "q1": (q1 == "S√≠"),
            "q2": (q2 == "S√≠"),
            "q3": (q3 == "S√≠"),
            "q4": (q4 == "S√≠"),
            "q5": (q5 == "S√≠"),
        }
        st.session_state.score = calc_score(resps)
        st.session_state.calif_listo = st.session_state.score >= 70

    if st.session_state.calif_listo:
        st.success(f"Proyecto viable ({st.session_state.score}%). Abre la pesta√±a **B) Caso (chat inteligente)**.")
    else:
        st.info(f"Score actual: {st.session_state.score}%. A√∫n no alcanza 70%.")

# ============ TAB B: CHAT INTELIGENTE ============
with tab_chat:
    if not st.session_state.calif_listo:
        st.warning("Primero alcanza ‚â• 70% en **A) Calificaci√≥n** para habilitar el chat.")
    else:
        st.subheader("Caso de negocio ‚Äî chat inteligente")
        st.caption("Responde en lenguaje natural. El asistente reconocer√° informaci√≥n y solo preguntar√° lo que falte.")

        # Mensaje inicial
        if not st.session_state.chat_msgs:
            saludo = (
                f"Hola üëã Soy tu asistente. Vamos a construir el caso de negocio para **{st.session_state.lead.get('empresa') or 'tu empresa'}**.\n\n"
                "Cu√©ntame primero **los objetivos de negocio** y **el problema a resolver**. "
                "Puedes escribir todo junto; ir√© extrayendo lo importante."
            )
            add_msg("assistant", saludo)

        # Render de historial
        for role, text in st.session_state.chat_msgs:
            with st.chat_message(role):
                st.write(text)

        # Entrada del usuario
        user = st.chat_input("Escribe tu mensaje‚Ä¶")
        if user:
            add_msg("user", user)

            # 1) extraer datos autom√°ticos de lo que escribi√≥
            updates = extract_info_es(user)
            # Solo rellenamos campos vac√≠os para no pisar ediciones previas
            for k, v in updates.items():
                if k in st.session_state.caso and not st.session_state.caso[k]:
                    st.session_state.caso[k] = v

            # 2) decidir qu√© preguntar despu√©s
            faltante_key, faltante_preg = first_missing(st.session_state.caso)
            if faltante_key:
                # feedback: lo que entend√≠
                entendidos = [label for (k, label) in REQUIRED_FIELDS if updates.get(k)]
                pref = ""
                if entendidos:
                    pref = "Anotado: " + "; ".join([l.replace("¬ø", "").replace("?", "") for l in entendidos]) + ". "
                respuesta = pref + faltante_preg
            else:
                respuesta = (
                    "Perfecto, ya tengo todo el caso capturado. "
                    "Puedes revisar el **resumen en vivo** abajo y presionar **Finalizar caso** cuando est√© listo."
                )

            add_msg("assistant", respuesta)

        # Resumen en vivo y botones
        st.divider()
        render_resumen_live()

        c1, c2, c3 = st.columns([1,1,2])
        with c1:
            if st.button("Limpiar chat", use_container_width=True):
                st.session_state.chat_msgs = []
        with c2:
            if all(st.session_state.caso[k] for k, _ in REQUIRED_FIELDS):
                if st.button("Finalizar caso ‚úÖ", type="primary", use_container_width=True):
                    st.session_state.caso_finalizado = True
                    add_msg("assistant", "Caso finalizado. Puedes generar el PDF en tu m√≥dulo o continuar con Inteligencia competitiva.")
            else:
                st.disabled = True
                st.button("Finalizar caso ‚úÖ", disabled=True, use_container_width=True)

# ============ TAB C: INTELIGENCIA COMPETITIVA ============
with tab_intel:
    st.subheader("Inteligencia competitiva (RAG listo)")
    st.caption("Pega 1 URL por l√≠nea (Babel y competidores). Esto luego consultar√° tu √≠ndice RAG.")
    urls = st.text_area("URLs", "\n".join(st.session_state.intel_urls), height=120)
    st.session_state.intel_urls = [u.strip() for u in urls.splitlines() if u.strip()]

    col1, col2 = st.columns([1,1])
    with col1:
        st.write("**Sitios**")
        st.write(", ".join([u.split("//")[-1].split("/")[0] for u in st.session_state.intel_urls]))
    with col2:
        st.write("**Sugerencias (simulado)**")
        st.write(
            "‚Ä¢ Babel: modernizaci√≥n, datos/IA, automatizaci√≥n, time-to-value.\n"
            "‚Ä¢ Accenture: transformaci√≥n digital end-to-end, consultor√≠a.\n"
            "‚Ä¢ IBM Consulting: datos e integraci√≥n empresarial."
        )
    st.info("Cuando actives tu RAG, esta pesta√±a generar√° la comparativa autom√°tica contra las URLs indexadas.")
